// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20241105140732_inicio")]
    partial class inicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Entities.CategoriaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("TipoCategoria")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Descricao");

                    b.HasIndex("Pais");

                    b.HasIndex("Tipo");

                    b.HasIndex("TipoCategoria");

                    b.HasIndex("UrlImagens");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Api.Domain.Entities.ConteudoCategoriaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Descricao");

                    b.HasIndex("Nome");

                    b.HasIndex("Tipo");

                    b.HasIndex("UrlImagens");

                    b.ToTable("ConteudoCategoria");
                });

            modelBuilder.Entity("Api.Domain.Entities.ControleRigadoresEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cabecario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fonte1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fonte2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Humidade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IpPlaca")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Mac")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NivelTanque1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NivelTanque2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StatusBomba1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StatusBomba2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Temperatura")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("sens_0")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("sens_1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("sens_2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("sens_3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stsRL_0")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stsRL_1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stsRL_2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stsRL_3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stsRL_4")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("temp_0")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("umid_0")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ControleRigadores");
                });

            modelBuilder.Entity("Api.Domain.Entities.CurtidasConteudosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConteudosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Curtidas")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ConteudosId");

                    b.HasIndex("UserId");

                    b.ToTable("CurtidasConteudos");
                });

            modelBuilder.Entity("Api.Domain.Entities.CurtidasPEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Curtidas")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("FornecedorProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorProdutosId");

                    b.HasIndex("ProdutosId");

                    b.HasIndex("UserId");

                    b.ToTable("CurtidasP");
                });

            modelBuilder.Entity("Api.Domain.Entities.DenunciasEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TipoDenuncias")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Descricao");

                    b.HasIndex("TipoDenuncias");

                    b.ToTable("Denuncias");
                });

            modelBuilder.Entity("Api.Domain.Entities.FornecedorProdutosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurtidasTotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Delete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("KM")
                        .HasColumnType("double");

                    b.Property<double>("MaxKM")
                        .HasColumnType("double");

                    b.Property<string>("NomeProdutoFornecedor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserFornecedorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserFornecedorId");

                    b.ToTable("FornecedorProdutos");
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensConteudosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoImagem")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<Guid>("ConteudosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CodigoImagem");

                    b.HasIndex("ConteudosId");

                    b.ToTable("ImagensConteudos");
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensFEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoImagem")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FornecedorProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CodigoImagem");

                    b.HasIndex("FornecedorProdutosId");

                    b.ToTable("ImagensF");
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensPEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoImagem")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CodigoImagem");

                    b.HasIndex("ProdutosId");

                    b.ToTable("ImagensP");
                });

            modelBuilder.Entity("Api.Domain.Entities.MensagensPEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteUsuarioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdProdutoUsuarioTroca")
                        .HasColumnType("char(36)");

                    b.Property<string>("Imagem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("MensagenLida")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mensagens")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("ProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdProdutoUsuarioTroca");

                    b.HasIndex("MensagenLida");

                    b.HasIndex("Mensagens");

                    b.HasIndex("ProdutosId");

                    b.HasIndex("UserId");

                    b.ToTable("MensagensP");
                });

            modelBuilder.Entity("Api.Domain.Entities.ProdutosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteUsuarioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurtidasTotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Delete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Idioma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("KM")
                        .HasColumnType("double");

                    b.Property<string>("Mapa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<Guid>("TipoServicoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("TipoServicoId");

                    b.HasIndex("UserId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Api.Domain.Entities.TipoServicoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("TipoCategoria")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlImagens")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Pais");

                    b.HasIndex("Tipo");

                    b.ToTable("TipoServico");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CodEstado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Delete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EnviarEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Idioma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImagemLogin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Pais")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<Guid>("TermosResponsabilidades")
                        .HasColumnType("char(36)");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TokenCalendar")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TokenRedes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TrocarSenha")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UserLogado")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserFornecedorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CodEstado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CodRegistroEmpresas")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Delete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("LogoTipo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Numero")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TokenRedes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UserFornecedor");
                });

            modelBuilder.Entity("Domain.Entities.AgenteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Imagem")
                        .HasColumnType("MEDIUMTEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<Guid?>("ProdutoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Descricao");

                    b.HasIndex("Email");

                    b.HasIndex("Nome");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UserId");

                    b.ToTable("Agente");
                });

            modelBuilder.Entity("Domain.Entities.ClienteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Descricao");

                    b.HasIndex("Email");

                    b.HasIndex("Nome");

                    b.HasIndex("Telefone");

                    b.HasIndex("UserId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Domain.Entities.ConteudosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConteudoCategoriaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(5000);

                    b.Property<Guid>("IdConteudoCategoria")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdImagensConteudos")
                        .HasColumnType("char(36)");

                    b.Property<string>("Idioma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Json")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NomeConteudo")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("TotalCurtidas")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VideoRelacionado")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConteudoCategoriaId");

                    b.HasIndex("IdConteudoCategoria");

                    b.HasIndex("Json");

                    b.HasIndex("NomeConteudo");

                    b.HasIndex("TotalCurtidas");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoRelacionado");

                    b.ToTable("Conteudos");
                });

            modelBuilder.Entity("Domain.Entities.DenunciaProdutoUsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DenunciasId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutosId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DenunciasId");

                    b.HasIndex("ProdutosId");

                    b.HasIndex("UserId");

                    b.ToTable("DenunciaProdutoUsuario");
                });

            modelBuilder.Entity("Domain.Entities.EmailsNewsletterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescricaoNewsletter")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("HTML")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(5000);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("TipoNewsletter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("DescricaoNewsletter");

                    b.HasIndex("Nome");

                    b.HasIndex("Pais");

                    b.HasIndex("TipoNewsletter");

                    b.ToTable("EmailsNewsletter");
                });

            modelBuilder.Entity("Domain.Entities.TermosResponsabilidadesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Responsabilidades")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Pais");

                    b.ToTable("TermosResponsabilidades");
                });

            modelBuilder.Entity("Api.Domain.Entities.ControleRigadoresEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("ControleRigadores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.CurtidasConteudosEntity", b =>
                {
                    b.HasOne("Domain.Entities.ConteudosEntity", "Conteudos")
                        .WithMany("CurtidasConteudos")
                        .HasForeignKey("ConteudosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("CurtidasConteudos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.CurtidasPEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.FornecedorProdutosEntity", "FornecedorProdutos")
                        .WithMany("CurtidasP")
                        .HasForeignKey("FornecedorProdutosId");

                    b.HasOne("Api.Domain.Entities.ProdutosEntity", "Produtos")
                        .WithMany("CurtidasP")
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("CurtidasP")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.FornecedorProdutosEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.UserFornecedorEntity", "UserFornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("UserFornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensConteudosEntity", b =>
                {
                    b.HasOne("Domain.Entities.ConteudosEntity", "Conteudos")
                        .WithMany("ImagensConteudos")
                        .HasForeignKey("ConteudosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensFEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.FornecedorProdutosEntity", "FornecedorProdutos")
                        .WithMany("ImagensF")
                        .HasForeignKey("FornecedorProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.ImagensPEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ProdutosEntity", "Produtos")
                        .WithMany("ImagensP")
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.MensagensPEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ProdutosEntity", "Produtos")
                        .WithMany("MensagensP")
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("MensagensP")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.ProdutosEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.CategoriaEntity", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.TipoServicoEntity", "TipoServico")
                        .WithMany()
                        .HasForeignKey("TipoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("Produtos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AgenteEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ProdutosEntity", "Produto")
                        .WithMany("Agente")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("Agente")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ConteudosEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ConteudoCategoriaEntity", "ConteudoCategoria")
                        .WithMany()
                        .HasForeignKey("ConteudoCategoriaId");

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("Conteudos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DenunciaProdutoUsuarioEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.DenunciasEntity", "Denuncias")
                        .WithMany("DenunciaProdutoUsuario")
                        .HasForeignKey("DenunciasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.ProdutosEntity", "Produtos")
                        .WithMany("DenunciaProdutoUsuario")
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("DenunciaProdutoUsuario")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
